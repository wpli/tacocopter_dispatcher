#!/usr/bin/python -u
import sys
sys.path.append( 'utils/' )
import pdb
import random
def write_output( string_output ):
    #print string_output
    sys.stdout.write( string_output + "\n" )

def get_start_end( t ):
    t = t.split()
    start_x = int( t[0] )
    end_x = int( t[2] )
    start_y = int( t[1] )
    end_y = int( t[3] )
    return [ start_x, start_y ], [ end_x, end_y ]

def modify_start_end( int_start, int_end ):
    add_val = 0.5 - 0.1 / 10**5
    #add_val = 0.0

    start = [ float(i) for i in int_start ]
    end = [ float(i) for i in int_end ]

    if int_start[0] < int_end[0]:
        start[0] = float( int_start[0] ) + add_val
        end[0] = float( int_end[0] ) - add_val
    elif int_start[0] > int_end[0]:
        start[0] = float( int_start[0] ) - add_val
        end[0] = float( int_end[0] ) + add_val

    if int_start[1] < int_end[1]:
        start[1] = float( int_start[1] ) + add_val
        end[1] = float( int_end[1] ) - add_val
    elif int_start[1] > int_end[1]:
        start[1] = float( int_start[1] ) - add_val
        end[1] = float( int_end[1] ) + add_val

    return [ start, end ]

def greedy( current_pos, int_end, map_list ):
    next_pos_vector = int_end[:]
    next_pos = int_end[:]
    greedy_direction = [ int_end[0] - current_pos[0], int_end[1] - current_pos[1] ]
    if greedy_direction[0] > 0:
        next_pos_vector[0] = 1
        next_pos[0] = current_pos[0] + 1
    elif greedy_direction[0] < 0:
        next_pos_vector[0] = -1
        next_pos[0] = current_pos[0] - 1
    else: 
        next_pos_vector[0] = 0
        next_pos[0] = current_pos[0]

    if greedy_direction[1] > 0:
        next_pos_vector[1] = 1
        next_pos[1] = current_pos[1] + 1
    elif greedy_direction[1] < 0:
        next_pos_vector[1] = -1
        next_pos[1] = current_pos[1] - 1
    else:
        next_pos_vector[1] = 0
        next_pos[1] = current_pos[1]

    # check if there is a building there

    
    if next_pos_vector == [ 0,0 ]:
        next_pos = None
    elif next_pos_vector == [ 1, 1 ]:
        if map_list[ next_pos[0] ][ next_pos[1] ] == 'B':
           # try proceeding horizontally
            if map_list[ next_pos[0] ][ current_pos[1] ] != 'B':
                next_pos[1] = current_pos[1]
            # try proceeding vertically
            elif map_list[ current_pos[0] ][next_pos[1] ] != 'B':
                next_pos[0] = current_pos[0]
            else:
                # we could just "try going to the end", but perhaps we should just go to the building and try again
                pass

    elif next_pos_vector[0] == 0:
        # must move vertically; check if there is a building there
        if map_list[ next_pos[0] ][ next_pos[1] ] == 'B':
            # if there is a building there, just fly over it to destination
            next_pos = None
        else:
            # proceed vertically
            pass
    elif next_pos_vector[1] == 0:
        # must move horizontally
        if map_list[ next_pos[0] ][ next_pos[1] ] == 'B':
            # if there is a building there, just fly over it to destination
            next_pos = None
        else:
            # proceed horizontally
            pass

        

    if next_pos == current_pos:
        next_pos = None

    return next_pos

def parse_map( map_file ):
    f = open( map_file, 'r' )
    tmp = f.read()
    # if len( tmp ) > 3000:
    #     return None
    # else:
    #     x = tmp.split('\n')

    x = tmp.split('\n')
    f.close()
    # construct the transposed map
    untransposed_map = [ i for i in x if len( i ) > 0 ]
    transposed_map = []
    for idx, i in enumerate( untransposed_map[0] ):
        column = [ j[idx] for j in untransposed_map ]
        transposed_map.append( column )
    return transposed_map

def get_next_pos( int_current_pos, current_pos, int_end, end, map_list, movement_library_dict = None ):
    #assert int_current_pos == [ int( round(i,0)) for i in current_pos ]
    #assert int_end == [ int( round(i,0)) for i in end ]

    greedy_next = greedy( int_current_pos, int_end, map_list )

    if greedy_next == None:

        try:
            possibilities = movement_library_dict[ tuple( int_current_pos ) ]
            poss_dict = dict( [ ( i, ( float(end[0]) - i[0] )**2 +(float(end[1])-i[1] )**2 ) for i in possibilities] )
            #greedy_next = min( ( k for k in poss_dict.keys() ), key=lambda x:poss_dict[x] )

            greedy_next = random.choice( possibilities )


        except KeyError:
            greedy_next = end

    return greedy_next

def get_square_from_float( coords ):
    x = int( round( coords[0], 0 ) )
    y = int( round( coords[1], 0 ) )
    return [ x, y ]

def find_intersecting_squares( start, end ):
    startf = [ float(x) for x in start ]
    endf = [ float(x) for x in end ]
    y1 = startf[1]
    y2 = endf[1]
    x1 = startf[0]
    x2 = endf[0]
    
    #current_square = get_square_from_float( startf )
    end_square = get_square_from_float( endf )
    endx = end_square[0]
    endy = end_square[1]

    start_square = get_square_from_float( startf )
    startx = start_square[0]
    starty = start_square[1]

    intersecting_squares = []
    if startx == endx:
        y = starty + 1
        while y < endy:
            intersecting_squares.append( [ startx, y ] )
            y += 1
    elif startx < endx:
        x = startx + 1
        while x < endx:
            y = int( float( ( endy - starty ) ) / ( endx - startx ) * ( float(x) - startx ) + starty )
            intersecting_squares.append( [ x, y ] )
            x += 1
    else:
        x = endx + 1
        while x < startx:
            y = int( float( ( endy - starty ) ) / ( endx - startx ) * ( float(x) - startx ) + starty )
            intersecting_squares.append( [ x, y ] )
            x += 1

    return intersecting_squares

def check_express( current_pos, end, map_list ):
    # check if a straight line can go from there to the end
    candidates_to_check = find_intersecting_squares( current_pos, end )
    for [ x, y ] in candidates_to_check:
        if map_list[x][y] == "B" or map_list[x][y] == "#":
            return False
    
    return True


def get_reachability( freespace_set ):
    reach_dict = dict( [ (key, set()) for key in list( freespace_set ) ] )
    for ( x, y ) in list( freespace_set ):
        #eight_neighbors = [ (x-1,y-1), (x-1,y), (x-1,y+1), (x,y-1), (x,y+1), (x+1,y-1), (x+1,y), (x+1,y+1) ]
        neighbors = [ (x-1,y), (x,y-1), (x,y+1), (x+1,y) ]

        for coord in neighbors:
            if coord in freespace_set:
                reach_dict[ ( x, y) ].add( coord )
    return reach_dict


def closest_freespace( coord, freespace_set ):
    if tuple( coord ) in freespace_set:
        return tuple( coord )
    else:
        return None

"""
Just a baseline check
"""
if __name__ == '__main__':
    map_file = sys.argv[1]
    map_list = parse_map( map_file )
    freespace_set = set()
    for idx_x, i in enumerate( map_list[1:-1] ): 
        for idx_y, j in enumerate( i ):
            if map_list[idx_x][idx_y] == ' ' or map_list[idx_x][idx_y] == '.':
                freespace_set.add( ( idx_x, idx_y ) )

    reach_dict = get_reachability( freespace_set )

    twograms = []
    for k, v in reach_dict.items():
        for end in list( v ):
            twograms.append( ( k, end ) )

    twogram_set = set(twograms)

    # threegrams = []
    # threegram_set = set()
    # if len(map_list) < 200:
    #     for gram in twograms:
    #         children = reach_dict[gram[-1]]
    #         for coord in list( children ):
    #             threegrams.append( tuple( list( gram ) + [ coord ] ) )

    #     threegram_set = set(threegrams)
    #     #print len(threegram_set)

    #     for i in list(threegram_set):
    #         if i[0] == i[-1]:
    #             threegram_set.remove( i )

    #movement_library = twogram_set.union( threegrams )
    movement_library = twograms
    movement_library_dict = dict( [ ( x[0], x[1:] ) for x in list( movement_library ) ] )
    while True:
        # t = sys.stdin.readline()
        # [ int_start, int_end ] = get_start_end( t )

        # import random
        # int_start = [ random.randint( 0,len(map_list)-1 ), random.randint( 0, len( map_list[0] )-1 ) ]
        # int_end = [ random.randint( 0,len(map_list)-1 ), random.randint( 0, len( map_list[0] )-1 ) ]
        # print int_start, int_end
                  
        [ start, end ] = modify_start_end( int_start, int_end )

        travel_list = []
        travel_list.append( start )
        int_travel_list = []
        int_travel_list.append( int_start )
        current_pos = start
        int_current_pos = [ int( round( i, 0 ) ) for i in current_pos ]
        while ( int_current_pos != int_end ):
            express = check_express( current_pos, end, map_list )
            if express:
                break
            else:
                found_new = False
                while ( found_new == False ):
                    next_pos = get_next_pos( int_current_pos, current_pos, int_end, end, map_list, movement_library_dict )
                    current_pos = next_pos
                    int_current_pos = [ int( round( i, 0 ) ) for i in current_pos ]
                    if int_current_pos not in int_travel_list:
                        found_new = True

                if int_current_pos != int_end:
                    travel_list.append( next_pos )
                    int_travel_list.append( int_current_pos )
                else:
                    break

        travel_list.append( end )
        string_output = " ".join( [ str( x[0] ) + " " + str( x[1] ) for x in travel_list ] )
        write_output(string_output)
        
        #pdb.set_trace()
