#!/usr/bin/python -u
import sys

def write_output( string_output ):
    sys.stdout.write( string_output + "\n" )

def get_start_end( t ):
    t = t.split()
    start_x = int( t[0] )
    end_x = int( t[2] )
    start_y = int( t[1] )
    end_y = int( t[3] )
    return [ start_x, start_y ], [ end_x, end_y ]

def modify_start_end( int_start, int_end ):
    add_val = 0.5 - 0.1 / 10**5\
    #add_val = 0.0

    start = [ float(i) for i in int_start ]
    end = [ float(i) for i in int_end ]

    if int_start[0] < int_end[0]:
        start[0] = float( int_start[0] ) + add_val
        end[0] = float( int_end[0] ) - add_val
    elif int_start[0] > int_end[0]:
        start[0] = float( int_start[0] ) - add_val
        end[0] = float( int_end[0] ) + add_val

    if int_start[1] < int_end[1]:
        start[1] = float( int_start[1] ) + add_val
        end[1] = float( int_end[1] ) - add_val
    elif int_start[1] > int_end[1]:
        start[1] = float( int_start[1] ) - add_val
        end[1] = float( int_end[1] ) + add_val

    return [ start, end ]

def greedy( current_pos, int_end, map_list ):
    next_pos_vector = int_end[:]
    next_pos = int_end[:]
    greedy_direction = [ int_end[0] - current_pos[0], int_end[1] - current_pos[1] ]
    
    if greedy_direction[0] > 0:
        next_pos_vector[0] = 1
        next_pos[0] = current_pos[0] + 1
    elif greedy_direction[0] < 0:
        next_pos_vector[0] = -1
        next_pos[0] = current_pos[0] - 1
    else: 
        next_pos_vector[0] = 0
        next_pos[0] = current_pos[0]

    if greedy_direction[1] > 0:
        next_pos_vector[1] = 1
        next_pos[1] = current_pos[1] + 1
    elif greedy_direction[1] < 0:
        next_pos_vector[0] = -1
        next_pos[1] = current_pos[1] - 1
    else:
        next_pos_vector[1] = 0
        next_pos[1] = current_pos[1]

    print next_pos_vector, next_pos
    # check if there is a building there
    if next_pos_vector[0] != 0:
        pass

    return next_pos

def parse_map( map_file ):
    f = open( map_file, 'r' )
    x = f.read().split('\n') 
    # delete the first line
    del x[0]
    del x[-1]
    map_list = []
    for i in x:
        row_list = []
        end_counter = 0
        for char in i:
            if char == '#':
                pass
            else:
                row_list.append( char )
        
        map_list.append( row_list )

    return map_list

def get_next_pos( int_current_pos, current_pos, int_end, end, map_list ):
    assert int_current_pos == [ int( round(i,0)) for i in current_pos ]
    assert int_end == [ int( round(i,0)) for i in end ]

    greedy_next = greedy( int_current_pos, int_end, map_list )

    return greedy_next

"""
Avoid buildings at all costs, unless it is the start or end
"""
if __name__ == '__main__':

    while True:
        map_file = sys.argv[1]
        map_list = parse_map( map_file )
        t = sys.stdin.readline()
        [ int_start, int_end ] = get_start_end( t )
        [ start, end ] = modify_start_end( int_start, int_end )
        

        #manhattan approach
        travel_list = []
        travel_list.append( start )
        current_pos = start
        int_current_pos = [ int( round( i, 0 ) ) for i in current_pos ]

        while ( int_current_pos != int_end ):
            next_pos = get_next_pos( int_current_pos, current_pos, int_end, end, map_list )
            current_pos = next_pos
            int_current_pos = [ int( round( i, 0 ) ) for i in current_pos ]

            if int_current_pos != int_end:
                travel_list.append( next_pos )
            else:
                pass

        travel_list.append( end )

        string_output = " ".join( [ str( x[0] ) + " " + str( x[1] ) for x in travel_list ] )

        write_output(string_output)




    
